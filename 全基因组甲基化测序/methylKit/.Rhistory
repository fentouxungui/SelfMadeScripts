group = apply(cnn.res.list[[x]], 1, which.max),
value = apply(cnn.res.list[[x]], 1, max)))
res <- Reduce(rbind, res.list)
library(ggplot2)
ggplot(res, mapping = aes(x = value, color = group,fill = group)) +
geom_histogram() +
facet_grid(sample~group)
res.list <- lapply(cnn.res.list,FUN = function(x)sum(apply(x, 1, max) > 0.9))
res <- sort(unlist(res.list))
res
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R)))
library(h2o)
h2o.init()
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R)))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R))）
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R)))
)
install.packages("h2o", type = "source", repos = c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R"))
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")
options()
options(timeout = 600)
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")
library(h2o)
h2o.init()
h2o.init()
h2o.init()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("methylKit")
BiocManager::install(version = "3.16")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MethylSeekR")
install.packages("gprofiler2")
setwd("F:/BaiduNetdiskWorkspace/Github/Scripts-我的数据分析代码/全基因组甲基化测序")
knitr::opts_chunk$set(echo = TRUE)
library(methylKit)
file.list=list( system.file("extdata",
"test1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"test2.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control2.myCpG.txt", package = "methylKit") )
# read the files to a methylRawList object: myobj
myobj=methRead(file.list,
sample.id=list("test1","test2","ctrl1","ctrl2"),
assembly="hg18",
treatment=c(1,1,0,0),
context="CpG",
mincov = 10
)
file.list
?methRead
myobj
library(methylKit)
file.list=list( system.file("extdata", "test1.myCpG.txt", package = "methylKit"),
system.file("extdata", "test2.myCpG.txt", package = "methylKit"),
system.file("extdata", "control1.myCpG.txt", package = "methylKit"),
system.file("extdata", "control2.myCpG.txt", package = "methylKit") )
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB=methRead(file.list,
sample.id=list("test1","test2","ctrl1","ctrl2"),
assembly="hg18",
treatment=c(1,1,0,0),
context="CpG",
dbtype = "tabix",
dbdir = "methylDB"
)
print(myobjDB[[1]]@dbpath)
## [1] "/tmp/RtmpsqsgSP/Rbuild1f1aba63ec8a86/methylKit/vignettes/methylDB/test1.txt.bgz"
my.methRaw=processBismarkAln( location =
system.file("extdata",
"test.fastq_bismark.sorted.min.sam",
package = "methylKit"),
sample.id="test1", assembly="hg18",
read.context="CpG", save.folder=getwd())
getMethylationStats(myobj[[2]],plot=FALSE,both.strands=FALSE)
## methylation statistics per base
## summary:
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##    0.00   20.00   82.79   63.17   94.74  100.00
## percentiles:
##        0%       10%       20%       30%       40%       50%       60%       70%
##   0.00000   0.00000   0.00000  48.38710  70.00000  82.78556  90.00000  93.33333
##       80%       90%       95%       99%     99.5%     99.9%      100%
##  96.42857 100.00000 100.00000 100.00000 100.00000 100.00000 100.00000
getMethylationStats(myobj[[2]],plot=TRUE,both.strands=FALSE)
getCoverageStats(myobj[[2]],plot=TRUE,both.strands=FALSE)
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
meth=unite(myobj, destrand=FALSE)
## uniting...
head(meth)
##     chr   start     end strand coverage1 numCs1 numTs1 coverage2 numCs2 numTs2
## 1 chr21 9853296 9853296      +        17     10      7       333    268     65
## 2 chr21 9853326 9853326      +        17     12      5       329    249     79
## 3 chr21 9860126 9860126      +        39     38      1        83     78      5
## 4 chr21 9906604 9906604      +        68     42     26       111     97     14
## 5 chr21 9906616 9906616      +        68     52     16       111    104      7
## 6 chr21 9906619 9906619      +        68     59      9       111    109      2
##   coverage3 numCs3 numTs3 coverage4 numCs4 numTs4
## 1        18     16      2       395    341     54
## 2        16     14      2       379    284     95
## 3        83     83      0        41     40      1
## 4        23     18      5        37     33      4
## 5        23     14      9        37     27     10
## 6        22     18      4        37     29      8
# creates a methylBase object,
# where only CpGs covered with at least 1 sample per group will be returned
# there were two groups defined by the treatment vector,
# given during the creation of myobj: treatment=c(1,1,0,0)
meth.min=unite(myobj,min.per.group=1L)
head(meth.min)
getCorrelation(meth,plot=TRUE)
##           test1     test2     ctrl1     ctrl2
## test1 1.0000000 0.9252530 0.8767865 0.8737509
## test2 0.9252530 1.0000000 0.8791864 0.8801669
## ctrl1 0.8767865 0.8791864 1.0000000 0.9465369
## ctrl2 0.8737509 0.8801669 0.9465369 1.0000000
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
## Warning in par(usr): argument 1 does not name a graphical parameter
clusterSamples(meth, dist="correlation", method="ward", plot=TRUE)
## The "ward" method has been renamed to "ward.D"; note new "ward.D2"
##
## Call:
## hclust(d = d, method = HCLUST.METHODS[hclust.method])
##
## Cluster method   : ward.D
## Distance         : pearson
## Number of objects: 4
hc = clusterSamples(meth, dist="correlation", method="ward", plot=FALSE)
PCASamples(meth, screeplot=TRUE)
PCASamples(meth)
# make some batch data frame
# this is a bogus data frame
# we don't have batch information
# for the example data
sampleAnnotation=data.frame(batch_id=c("a","a","b","b"),
age=c(19,34,23,40))
as=assocComp(mBase=meth,sampleAnnotation)
as
## $pcs
##              PC1        PC2         PC3         PC4
## test1 -0.4978699 -0.5220504  0.68923849 -0.06737363
## test2 -0.4990924 -0.4805506 -0.71827964  0.06365693
## ctrl1 -0.5016543  0.4938800  0.08068700  0.70563101
## ctrl2 -0.5013734  0.5026102 -0.05014261 -0.70249091
##
## $vars
## [1] 92.271885  4.525328  1.870950  1.331837
##
## $association
##                PC1       PC2       PC3       PC4
## batch_id 0.3333333 0.3333333 1.0000000 1.0000000
## age      0.5864358 0.6794346 0.3140251 0.3467957
# construct a new object by removing the first pricipal component
# from percent methylation value matrix
newObj=removeComp(meth,comp=1)
mat=percMethylation(meth)
# do some changes in the matrix
# this is just a toy example
# ideally you want to correct the matrix
# for batch effects
mat[mat==100]=80
# reconstruct the methylBase from the corrected matrix
newobj=reconstruct(mat,meth)
myobj_lowCov = methRead(file.list,
sample.id=list("test1","test2","ctrl1","ctrl2"),
assembly="hg18",
treatment=c(1,1,0,0),
context="CpG",
mincov = 3
)
## Received list of locations.
## Reading file.
## Reading file.
## Reading file.
## Reading file.
tiles = tileMethylCounts(myobj_lowCov,win.size=1000,step.size=1000,cov.bases = 10)
head(tiles[[1]],3)
##     chr    start      end strand coverage numCs numTs
## 1 chr21  9906001  9907000      *      970   604   366
## 2 chr21 10011001 10012000      *     2461  2169   292
## 3 chr21 10012001 10013000      *     4932  4175   756
myDiff=calculateDiffMeth(meth)
## two groups detected:
##  will calculate methylation difference as the difference of
## treatment (group: 1) - control (group: 0)
# get hyper methylated bases
myDiff25p.hyper=getMethylDiff(myDiff,difference=25,qvalue=0.01,type="hyper")
#
# get hypo methylated bases
myDiff25p.hypo=getMethylDiff(myDiff,difference=25,qvalue=0.01,type="hypo")
#
#
# get all differentially methylated bases
myDiff25p=getMethylDiff(myDiff,difference=25,qvalue=0.01)
diffMethPerChr(myDiff,plot=FALSE,qvalue.cutoff=0.01, meth.cutoff=25)
## $diffMeth.per.chr
##     chr number.of.hypermethylated percentage.of.hypermethylated
## 1 chr21                        75                      7.788162
##   number.of.hypomethylated percentage.of.hypomethylated
## 1                       59                     6.126687
##
## $diffMeth.all
##   number.of.hypermethylated percentage.of.hypermethylated
## 1                        75                      7.788162
##   number.of.hypomethylated percentage.of.hypomethylated
## 1                       59                     6.126687
sim.methylBase1<-dataSim(replicates=6,sites=1000,
treatment=c(rep(1,3),rep(0,3)),
sample.ids=c(paste0("test",1:3),paste0("ctrl",1:3))
)
my.diffMeth<-calculateDiffMeth(sim.methylBase1[1:,],
sim.methylBase1
sim.methylBase1 <- dataSim(replicates=6,sites=1000,
treatment=c(rep(1,3),rep(0,3)),
sample.ids=c(paste0("test",1:3),paste0("ctrl",1:3))
)
my.diffMeth <- calculateDiffMeth(sim.methylBase1,
overdispersion="MN",test="Chisq",mc.cores=1)
my.diffMeth
covariates=data.frame(age=c(30,80,34,30,80,40))
sim.methylBase<-dataSim(replicates=6,sites=1000,
treatment=c(rep(1,3),rep(0,3)),
covariates=covariates,
sample.ids=c(paste0("test",1:3),paste0("ctrl",1:3))
)
my.diffMeth3<-calculateDiffMeth(sim.methylBase,
covariates=covariates,
overdispersion="MN",test="Chisq",mc.cores=1)
myDiff=calculateDiffMeth(meth,mc.cores=2)
library(genomation)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genomation")
library(genomation)
## Loading required package: grid
## Warning: replacing previous import 'Biostrings::pattern' by 'grid::pattern' when
## loading 'genomation'
##
## Attaching package: 'genomation'
## The following objects are masked from 'package:methylKit':
##
##     getFeatsWithTargetsStats, getFlanks, getMembers,
##     getTargetAnnotationStats, plotTargetAnnotation
# read the gene BED file
gene.obj=readTranscriptFeatures(system.file("extdata", "refseq.hg18.bed.txt",
package = "methylKit"))
## Reading the table...
## Calculating intron coordinates...
## Calculating exon coordinates...
## Calculating TSS coordinates...
## Calculating promoter coordinates...
## Outputting the final GRangesList...
#
# annotate differentially methylated CpGs with
# promoter/exon/intron using annotation data
#
annotateWithGeneParts(as(myDiff25p,"GRanges"),gene.obj)
## Summary of target set annotation with genic parts
## Rows in target set: 133
## -----------------------
## percentage of target features overlapping with annotation:
##   promoter       exon     intron intergenic
##      27.82      15.04      34.59      57.14
##
## percentage of target features overlapping with annotation:
## (with promoter > exon > intron precedence):
##   promoter       exon     intron intergenic
##      27.82       0.00      15.04      57.14
##
## percentage of annotation boundaries with feature overlap:
## promoter     exon   intron
##     0.29     0.03     0.17
##
## summary of distances to the nearest TSS:
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##       5     828   45158   52034   94644  313528
##
# read the shores and flanking regions and name the flanks as shores
# and CpG islands as CpGi
cpg.obj=readFeatureFlank(system.file("extdata", "cpgi.hg18.bed.txt",
package = "methylKit"),
feature.flank.name=c("CpGi","shores"))
#
# convert methylDiff object to GRanges and annotate
diffCpGann=annotateWithFeatureFlank(as(myDiff25p,"GRanges"),
cpg.obj$CpGi,cpg.obj$shores,
feature.name="CpGi",flank.name="shores")
promoters=regionCounts(myobj,gene.obj$promoters)
head(promoters[[1]])
##     chr    start      end strand coverage numCs numTs
## 1 chr21 10011791 10013791      -     7953  6662  1290
## 2 chr21 10119796 10121796      -     1725  1171   554
## 3 chr21 10119808 10121808      -     1725  1171   554
## 4 chr21 13903368 13905368      +       10    10     0
## 5 chr21 14273636 14275636      -      282   220    62
## 6 chr21 14509336 14511336      +     1058    55  1003
diffAnn=annotateWithGeneParts(as(myDiff25p,"GRanges"),gene.obj)
# target.row is the row number in myDiff25p
head(getAssociationWithTSS(diffAnn))
##      target.row dist.to.feature feature.name feature.strand
## 60            1          106111    NM_199260              -
## 60.1          2          106098    NM_199260              -
## 60.2          3          106092    NM_199260              -
## 60.3          4          105919    NM_199260              -
## 60.4          5           85265    NM_199260              -
## 60.5          6           68287    NM_199260              -
getTargetAnnotationStats(diffAnn,percentage=TRUE,precedence=TRUE)
##   promoter       exon     intron intergenic
##      27.82       0.00      15.04      57.14
plotTargetAnnotation(diffAnn,precedence=TRUE,
main="differential methylation annotation")
plotTargetAnnotation(diffCpGann,col=c("green","gray","white"),
main="differential methylation annotation")
class(meth)
## [1] "methylBase"
## attr(,"package")
## [1] "methylKit"
as(meth,"GRanges")
## GRanges object with 963 ranges and 12 metadata columns:
##         seqnames    ranges strand | coverage1    numCs1    numTs1 coverage2
##            <Rle> <IRanges>  <Rle> | <integer> <integer> <integer> <integer>
##     [1]    chr21   9853296      + |        17        10         7       333
##     [2]    chr21   9853326      + |        17        12         5       329
##     [3]    chr21   9860126      + |        39        38         1        83
##     [4]    chr21   9906604      + |        68        42        26       111
##     [5]    chr21   9906616      + |        68        52        16       111
##     ...      ...       ...    ... .       ...       ...       ...       ...
##   [959]    chr21  19855690      + |        27        26         1        19
##   [960]    chr21  19855706      + |        27        27         0        19
##   [961]    chr21  19855711      + |        18        18         0        18
##   [962]    chr21  19943653      + |        12        12         0        32
##   [963]    chr21  19943695      + |        12        11         1        32
##            numCs2    numTs2 coverage3    numCs3    numTs3 coverage4    numCs4
##         <integer> <integer> <integer> <integer> <integer> <integer> <integer>
##     [1]       268        65        18        16         2       395       341
##     [2]       249        79        16        14         2       379       284
##     [3]        78         5        83        83         0        41        40
##     [4]        97        14        23        18         5        37        33
##     [5]       104         7        23        14         9        37        27
##     ...       ...       ...       ...       ...       ...       ...       ...
##   [959]        17         2        34        34         0        12        12
##   [960]        19         0        34        34         0        12        11
##   [961]        15         3        34        34         0        12        12
##   [962]        30         2        26        25         1        24        22
##   [963]        32         0        26        26         0        27        24
##            numTs4
##         <integer>
##     [1]        54
##     [2]        95
##     [3]         1
##     [4]         4
##     [5]        10
##     ...       ...
##   [959]         0
##   [960]         1
##   [961]         0
##   [962]         2
##   [963]         3
##   -------
##   seqinfo: 1 sequence from an unspecified genome; no seqlengths
class(myDiff)
## [1] "methylDiff"
## attr(,"package")
## [1] "methylKit"
as(myDiff,"GRanges")
## GRanges object with 963 ranges and 3 metadata columns:
##         seqnames    ranges strand |     pvalue    qvalue meth.diff
##            <Rle> <IRanges>  <Rle> |  <numeric> <numeric> <numeric>
##     [1]    chr21   9853296      + | 0.00990814 0.0215658 -7.012107
##     [2]    chr21   9853326      + | 0.94735455 0.5921730  0.209136
##     [3]    chr21   9860126      + | 0.04160449 0.0697808 -4.111581
##     [4]    chr21   9906604      + | 0.21065168 0.2594531 -7.346369
##     [5]    chr21   9906616      + | 0.00157650 0.0043222 18.817505
##     ...      ...       ...    ... .        ...       ...       ...
##   [959]    chr21  19855690      + |  0.0390193 0.0660275  -6.52174
##   [960]    chr21  19855706      + |  0.2371789 0.2829587   2.17391
##   [961]    chr21  19855711      + |  0.0241291 0.0446546  -8.33333
##   [962]    chr21  19943653      + |  0.7528367 0.5921730   1.45455
##   [963]    chr21  19943695      + |  0.3904234 0.3960455   3.38765
##   -------
##   seqinfo: 1 sequence from an unspecified genome; no seqlengths
class(myobjDB[[1]])
## [1] "methylRawDB"
## attr(,"package")
## [1] "methylKit"
as(myobjDB[[1]],"methylRaw")
data(methylKit)
baseDB.obj <- makeMethylDB(methylBase.obj,"my/path")
## creating directory my/path ...
## compressing the file with bgzip...
## making tabix index...
## flatfile located at: /tmp/RtmpsqsgSP/Rbuild1f1aba63ec8a86/methylKit/vignettes/my/path/methylBase_1f2eff3b9a2eeb.txt.bgz
mydbpath <- getDBPath(baseDB.obj)
rm(baseDB.obj)
methylKit:::checkTabixHeader(mydbpath)
## [[1]]
## NULL
##
## [[2]]
## NULL
##
## $dbtype
## [1] "tabix"
##
## $sample.ids
## [1] "test1" "test2" "ctrl1" "ctrl2"
##
## $assembly
## [1] "hg18"
##
## $context
## [1] "CpG"
##
## $resolution
## [1] "base"
##
## $coverage.index
## [1]  5  8 11 14
##
## $numCs.index
## [1]  6  9 12 15
##
## $numTs.index
## [1]  7 10 13 16
##
## $treatment
## [1] 1 1 0 0
##
## $destranded
## [1] FALSE
##
## $num.records
## [1] 963
##
## $dbtype
## [1] "tabix"
##
## $class
## [1] "methylBase"
readMethylDB(mydbpath)
## methylBaseDB object with 963 rows
## --------------
##     chr   start     end strand coverage1 numCs1 numTs1 coverage2 numCs2 numTs2
## 1 chr21 9853296 9853296      +        17     10      7       333    268     65
## 2 chr21 9853326 9853326      +        17     12      5       329    249     79
## 3 chr21 9860126 9860126      +        39     38      1        83     78      5
## 4 chr21 9906604 9906604      +        68     42     26       111     97     14
## 5 chr21 9906616 9906616      +        68     52     16       111    104      7
## 6 chr21 9906619 9906619      +        68     59      9       111    109      2
##   coverage3 numCs3 numTs3 coverage4 numCs4 numTs4
## 1        18     16      2       395    341     54
## 2        16     14      2       379    284     95
## 3        83     83      0        41     40      1
## 4        23     18      5        37     33      4
## 5        23     14      9        37     27     10
## 6        22     18      4        37     29      8
## --------------
## sample.ids: test1 test2 ctrl1 ctrl2
## destranded FALSE
## assembly: hg18
## context: CpG
## treament: 1 1 0 0
## resolution: base
## dbtype: tabix
library(GenomicRanges)
my.win=GRanges(seqnames="chr21",
ranges=IRanges(start=seq(from=9764513,by=10000,length.out=20),width=5000) )
# selects the records that lie inside the regions
selectByOverlap(myobj[[1]],my.win)
download.file("https://raw.githubusercontent.com/BIMSBbioinfo/compgen2018/master/day3_diffMeth/data/H1.chr21.chr22.rds",
destfile="H1.chr21.chr22.rds",method="curl")
download.file("https://raw.githubusercontent.com/BIMSBbioinfo/compgen2018/master/day3_diffMeth/data/H1.chr21.chr22.rds",
destfile="H1.chr21.chr22.rds",method="wget")
?download.file
download.file("https://raw.githubusercontent.com/BIMSBbioinfo/compgen2018/master/day3_diffMeth/data/H1.chr21.chr22.rds",
destfile="H1.chr21.chr22.rds")
# download.file("https://raw.githubusercontent.com/BIMSBbioinfo/compgen2018/master/day3_diffMeth/data/H1.chr21.chr22.rds",
#              destfile="H1.chr21.chr22.rds",method="wget")
mbw=readRDS("H1.chr21.chr22.rds")
# it finds the optimal number of componets as 6
res=methSeg(mbw,diagnostic.plot=TRUE,maxInt=100,minSeg=10)
# however the BIC stabilizes after 4, we can also try 4 componets
res=methSeg(mbw,diagnostic.plot=TRUE,maxInt=100,minSeg=10,G=1:4)
# get segments to BED file
methSeg2bed(res,filename="H1.chr21.chr22.trial.seg.bed")
