ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = (..count..)/sum(..count..)), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = (..count..)/sum(..count..)), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "identify")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color)")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = (..count..)/sum(..count..)), position = "fill")
table(diamonds$cut, diamonds$color)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, position = "identity"))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "identity",alpha = 1/5)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = (..count..)/sum(..count..)), position = "doge")
geom_bar(mapping = aes(x = cut, fill = color, position = "doge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, position = "doge"))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "doge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color), position = "dodge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = (..count..)/sum(..count..)), position = "dodge")
library(tidyverse)
?geom_boxplot
?coord_polar
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color))
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color))
bar + coord_polar()
bar + coord_polar(clip = off)
bar + coord_polar(direction = -1)
bar + coord_polar(clip = "off")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
bar + coord_polar(clip = "off")
?labs
dia
this_is_a_reallly_name <- 2.5
this_is_a_reallly_name <- 305
(a <- seq(1,10,length.ouu = 5))
(a <- seq(1,10,length.out = 5))
filter(mpg,cyl = 8)
filter(mpg,cyl == 8)
filter(diamonds)
filter(diamonds, carat > 3)
sqrt(2)^2
sqrt(2)^2 == 2
near(sqrt(2)^2, 2)
install.packages("installr")
install.packages("tidyverse")
library(tidyverse)
select(flights)
data(flights)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
select(flights, contains("TIME"))
?contains
?one_of
a <- 1
toupper("atggcccagtccaagcacggcctgaccaaggagatgaccatgaagtaccgcatggagggctgcgtggacggccacaagtt
cgtgatcaccggcgagggcatcggctaccccttcaagggcaagcaggccatcaacctgtgcgtggtggagggcggcccct
tgcccttcgccgaggacatcttgtccgccgccttcatgtacggcaaccgcgtgttcaccgagtacccccaggacatcgtc
gactacttcaagaactcctgccccgccggctacacctgggaccgctccttcctgttcgaggacggcgccgtgtgcatctg
caacgccgacatcaccgtgagcgtggaggagaactgcatgtaccacgagtccaagttctacggcgtgaacttccccgccg
acggccccgtgatgaagaagatgaccgacaactgggagccctcctgcgagaagatcatccccgtgcccaagcagggcatc
ttgaagggcgacgtgagcatgtacctgctgctgaaggacggtggccgcttgcgctgccagttcgacaccgtgtacaaggc
caagtccgtgccccgcaagatgcccgactggcacttcatccagcacaagctgacccgcgaggaccgcagcgacgccaaga
accagaagtggcacctgaccgagcacgccatcgcctccggctccgccttgccctga")
library(Rtsne)
?tsne
install.packages("bookdown")
astring <- "EC_FKDL210224443-1a_R1.fq.gz"
tmp <- gsub("fq.gz$","fastq.gz", astring, fixed = TRUE)  # fq to fastq
tmp <- gsub(".clean.fastq.gz$",".fastq.gz", astring, fixed = TRUE)  # .clean.fastq.gz to .fastq.gz
tmp
gsub("fq.gz$","fastq.gz", astring, fixed = TRUE)
astring
gsub("fq.gz$","fastq.gz","EC_FKDL210224443-1a_R1.fq.gz", fixed = TRUE)
gsub("fq.gz","fastq.gz","EC_FKDL210224443-1a_R1.fq.gz", fixed = TRUE)
gsub("fq.gz$","fastq.gz", astring)
gsub("fq\\.gz$","fastq.gz", astring)
## 尝试解析非标准的格式
trans_name <- function(astring, format = format.standard){
tmp <- gsub("fq\\.gz$","fastq.gz", astring)  # fq to fastq
tmp <- gsub("\\.clean\\.fastq\\.gz$",".fastq.gz", astring)  # .clean.fastq.gz to .fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("[\\._]([12])[\\._]fastq.gz$","_R\\1.fastq.gz",tmp) # [._]1[._]fastq.gz to _R1.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("[\\._](R[12])[\\._]fastq.gz$","_\\1_001.fastq.gz",tmp) # [_.]R1[_.]fastq.gz to _R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("_(L00[1-8])_(R[12])_001.fastq.gz$","_S1_\\1_\\2_001.fastq.gz",tmp) # _L001_R1_001.fastq.gz to _S1_L001_R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("_(S[1-96])_(R[12])_001.fastq.gz$","_\\1_L001_\\2_001.fastq.gz",tmp) # _S1_R1_001.fastq.gz to _S1_L001_R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("_(R[12])_001.fastq.gz$","_S1_L001_\\1_001.fastq.gz",tmp) # _R1_001.fastq.gz to _S1_L001_R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("\\.fastq.gz$"," _S1_L001_R1_001.fastq.gz",tmp) # .fastq.gz to _S1_L001_R1_001.fastq.gz
}
}
}
}
}
}
if (grepl(pattern = format, tmp)) {
return(tmp)
}else{
return("")
}
}
trans_name("EC_FKDL210224443-1a_R1.fq.gz", format = ".*_S\\d+_L00[1-8]_R[1-2]_001.fastq.gz")
tmp <- gsub("fq\\.gz$","fastq.gz", astring)  # fq to fastq
tmp <- gsub("\\.clean\\.fastq\\.gz$",".fastq.gz", astring)  #
tmp
gsub("fq\\.gz$","fastq.gz", astring)  # fq to fastq
## 尝试解析非标准的格式
trans_name <- function(astring, format = format.standard){
tmp <- gsub("fq\\.gz$","fastq.gz", astring)  # fq to fastq
tmp <- gsub("\\.clean\\.fastq\\.gz$",".fastq.gz", tmp)  # .clean.fastq.gz to .fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("[\\._]([12])[\\._]fastq.gz$","_R\\1.fastq.gz",tmp) # [._]1[._]fastq.gz to _R1.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("[\\._](R[12])[\\._]fastq.gz$","_\\1_001.fastq.gz",tmp) # [_.]R1[_.]fastq.gz to _R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("_(L00[1-8])_(R[12])_001.fastq.gz$","_S1_\\1_\\2_001.fastq.gz",tmp) # _L001_R1_001.fastq.gz to _S1_L001_R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("_(S[1-96])_(R[12])_001.fastq.gz$","_\\1_L001_\\2_001.fastq.gz",tmp) # _S1_R1_001.fastq.gz to _S1_L001_R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("_(R[12])_001.fastq.gz$","_S1_L001_\\1_001.fastq.gz",tmp) # _R1_001.fastq.gz to _S1_L001_R1_001.fastq.gz
if (!grepl(pattern = format, tmp)) {
tmp <- gsub("\\.fastq.gz$"," _S1_L001_R1_001.fastq.gz",tmp) # .fastq.gz to _S1_L001_R1_001.fastq.gz
}
}
}
}
}
}
if (grepl(pattern = format, tmp)) {
return(tmp)
}else{
return("")
}
}
trans_name("EC_FKDL210224443-1a_R1.fq.gz", format = ".*_S\\d+_L00[1-8]_R[1-2]_001.fastq.gz")
？lowess
?lowess
# KNN case study
data("iris")
str(iris)
?knn
# KNN case study
# Installing Packages
install.packages("e1071")
install.packages("caTools")
install.packages("class")
# Loading package
library(e1071)
library(caTools)
library(class)
# Loading data
data(iris)
head(iris)
# Splitting data into train
# and test data
split <- sample.split(iris, SplitRatio = 0.7)
train_cl <- subset(iris, split == "TRUE")
test_cl <- subset(iris, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting KNN Model
# to training dataset
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 1)
classifier_knn
# Confusiin Matrix
cm <- table(test_cl$Species, classifier_knn)
cm
# Model Evaluation - Choosing K
# Calculate out of Sample error
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# K = 3
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 3)
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# K = 5
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 5)
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# K = 7
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 7)
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# K = 15
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 15)
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# K = 19
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 19)
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
G=5 ## number of cell types
N=100 ## number of cells per cell type
M=1000 ## number of genes
initmean=0 ## baseline mean expression
initvar=10 ## baseline expression variance
upreg=10 ## degree of cell-type specific upregulation
upregvar=10 ## expression variance of upregulated genes
ng=100 ## number of upregulated genes per cell type
seed=0 ## random seed
set.seed(seed)
mat <- matrix(rnorm(N*M*G, initmean, initvar), M, N*G)
rownames(mat) <- paste0('gene', 1:M)
colnames(mat) <- paste0('cell', 1:(N*G))
group <- factor(sapply(1:G, function(x) rep(paste0('group', x), N)))
names(group) <- colnames(mat)
mat[1:10,1:10]
group
diff <- lapply(1:G, function(x) {
diff <- rownames(mat)[(((x-1)*ng)+1):(((x-1)*ng)+ng)]
mat[diff, group==paste0('group', x)] <<- mat[diff, group==paste0('group', x)] + rnorm(ng, upreg, upregvar)
return(diff)
})
names(diff) <- paste0('group', 1:G)
mat[mat<0] <- 0
mat <- t(t(mat)/colSums(mat))
mat <- log10(mat*1e6+1)
heatmap(mat, Rowv=NA, Colv=NA, col=colorRampPalette(c('blue', 'white', 'red'))(100), scale="none", ColSideColors=rainbow(G)[group], labCol=FALSE, labRow=FALSE)
library(RANN)
knn.info <- RANN::nn2(t(mat), k=30)
knn <- knn.info$nn.idx
knn.info
knn.info[1:5,1:5]
knn.info[1:5,]
?nn2
str(knn.info)
mat[1:5,1:5]
dim(mat)
knn.info$nn.idx[1:10,1:30]
knn <- knn.info$nn.idx
adj <- matrix(0, ncol(mat), ncol(mat))
rownames(adj) <- colnames(adj) <- colnames(mat)
seq_len(ncol(mat))
for(i in seq_len(ncol(mat))) {
adj[i,colnames(mat)[knn[i,]]] <- 1
}
adj
adj[1,]
library(igraph)
g <- igraph::graph.adjacency(adj, mode="undirected")
g <- simplify(g) ## remove self loops
V(g)$color <- rainbow(G)[group[names(V(g))]] ## color nodes by group
plot(g, vertex.label=NA)
?igraph::graph.adjacency
g
V(g)
str(g)
group[names(V(g))
]
km <- igraph::cluster_walktrap(g)
## community membership
com <- km$membership
names(com) <- km$names
table(com, group)
m <- 1:1000
y <- (1 - 1/m)^m
y
plot(m,y)
?Random
runif(1)
?runif
runif(1,min = 1,max = 100)
round(runif(1,min = 1,max = 100),digits = 0)
round(runif(1000,min = 1,max = 100),digits = 0)
length(uniqe(round(runif(1000,min = 1,max = 100),digits = 0)))
length(unique(round(runif(1000,min = 1,max = 100),digits = 0)))
length(unique(round(runif(1000,min = 1,max = 100),digits = 0)))
length(unique(round(runif(1000,min = 1,max = 100),digits = 0)))
length(unique(round(runif(1000,min = 1,max = 100),digits = 0)))
length(unique(round(runif(1000,min = 1,max = 100),digits = 0)))
round(runif(1000,min = 1,max = 100),digits = 0)
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
length(unique(round(runif(100,min = 1,max = 100),digits = 0)))
base64enc::base64decode("aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjY4MDk3NDI5")
utf8::as_utf8()base64enc::base64decode("aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjY4MDk3NDI5")
utf8::as_utf8(base64enc::base64decode("aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjY4MDk3NDI5"))
as.character(base64enc::base64decode("aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjY4MDk3NDI5"))
utf8::as_utf8(as.character(base64enc::base64decode("aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjY4MDk3NDI5")))
rawToChar(base64enc::base64decode("aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjY4MDk3NDI5"))
#mac is the matrix
nCols=ncol(mac)
#mac is the matrix
nCols=ncol(mac)
#mac is the matrix
nCols=ncol(mac)
h <- hash( keys=letters, values=1:26 )
library(hash)
install.packages("hash")
library(hash)
h <- hash( keys=letters, values=1:26 )
h <- hash( letters, 1:26 )
h
h[“a”]
h["a"]
clear(h)
h
library(Seurat)
install.packages(SeuratObject)
install.packages("SeuratObject"")
install.packages("SeuratObject")
install.packages(SeuratObject)
library(Seurat)
install.packages("rlang")
install.packages("rlang")
library(Seurat)
library(rlang)
install.packages("BiocManager",force = TRUE)
BiocManager::install(version = "3.16")
setwd("D:/BaiduNetdiskWorkspace/Github/Scripts-我的数据分析代码/全基因组甲基化测序/methylKit/RealData")
knitr::opts_chunk$set(echo = TRUE)
library(methylKit)
# read CpG.cov.txt files from bismark2bedGraph outputs
cpg.files <- list.files(".", recursive = TRUE,pattern = "_CpG.txt$",full.names = TRUE)
# read the files to a methylRawList object: myobj
myobj=methRead(as.list(cpg.files),
sample.id=as.list(gsub("_CpG.txt","",basename(cpg.files))),
assembly="galGal6", # can be any string
treatment=c(1,1,1,0,0,0), # a vector contatining 0 and 1 denoting which samples are control which samples are test
context="CpG", # methylation context string, ex: CpG,CHG,CHH, etc. (default:CpG)
# mincov = 10, # minimum read coverage to be included in the methylKit objects. defaults to 10.
mincov = 4, # 5~10x coverage
pipeline="bismarkCoverage"
)
for (i in 1:length(myobj)) {
print(getMethylationStats(myobj[[i]],plot=TRUE,both.strands=FALSE, breaks = 10))
}
for (i in 1:length(myobj)) {
print(getCoverageStats(myobj[[i]],plot=TRUE,both.strands=FALSE))
}
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
meth=unite(myobj, destrand=FALSE)
head(meth)
getCorrelation(meth,plot=TRUE)
clusterSamples(meth, dist="correlation", method="ward", plot=TRUE)
hc = clusterSamples(meth, dist="correlation", method="ward", plot=FALSE)
PCASamples(meth, screeplot=TRUE)
PCASamples(meth)
cpg.files <- list.files(".", recursive = TRUE,pattern = "_CpG.txt$",full.names = TRUE)
# read the files to a methylRawList object: myobj
myobj_lowCov=methRead(as.list(cpg.files),
sample.id=as.list(gsub("_CpG.txt","",basename(cpg.files))),
assembly="galGal6", # can be any string
treatment=c(1,1,1,0,0,0), # a vector contatining 0 and 1 denoting which samples are control which samples are test
context="CpG", # methylation context string, ex: CpG,CHG,CHH, etc. (default:CpG)
# mincov = 10, # minimum read coverage to be included in the methylKit objects. defaults to 10.
mincov = 3, # 5~10x coverage
pipeline="bismarkCoverage"
)
tiles = tileMethylCounts(myobj_lowCov,win.size=1000,step.size=1000,cov.bases = 10)
myobj_lowCov@.Data
str(myobj)
?methRead
as.list(cpg.files)
as.list(gsub("_CpG.txt","",basename(cpg.files)))
library(methylKit)
# read CpG.cov.txt files from bismark2bedGraph outputs
cpg.files <- list.files(".", recursive = TRUE,pattern = "_CpG.txt$",full.names = TRUE)
# read the files to a methylRawList object: myobj
myobj=methRead(as.list(cpg.files),
sample.id=as.list(gsub("_CpG.txt","",basename(cpg.files))),
assembly="galGal6", # can be any string
treatment=c(1,1,1,0,0,0), # a vector contatining 0 and 1 denoting which samples are control which samples are test
context="CpG", # methylation context string, ex: CpG,CHG,CHH, etc. (default:CpG)
# mincov = 10, # minimum read coverage to be included in the methylKit objects. defaults to 10.
mincov = 4 # 5~10x coverage
)
myobj
for (i in 1:length(myobj)) {
print(getMethylationStats(myobj[[i]],plot=FALSE,both.strands=FALSE,breaks = 10))
}
for (i in 1:length(myobj)) {
print(getMethylationStats(myobj[[i]],plot=TRUE,both.strands=FALSE, breaks = 10))
}
for (i in 1:length(myobj)) {
print(getCoverageStats(myobj[[i]],plot=TRUE,both.strands=FALSE))
}
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
meth=unite(myobj, destrand=FALSE)
head(meth)
getCorrelation(meth,plot=TRUE)
clusterSamples(meth, dist="correlation", method="ward", plot=TRUE)
hc = clusterSamples(meth, dist="correlation", method="ward", plot=FALSE)
PCASamples(meth, screeplot=TRUE)
PCASamples(meth)
# read CpG.cov.txt files from bismark2bedGraph outputs
cpg.files <- list.files(".", recursive = TRUE,pattern = "_CpG.txt$",full.names = TRUE)
# read the files to a methylRawList object: myobj
myobj_lowCov=methRead(as.list(cpg.files),
sample.id=as.list(gsub("_CpG.txt","",basename(cpg.files))),
assembly="galGal6", # can be any string
treatment=c(1,1,1,0,0,0), # a vector contatining 0 and 1 denoting which samples are control which samples are test
context="CpG", # methylation context string, ex: CpG,CHG,CHH, etc. (default:CpG)
# mincov = 10, # minimum read coverage to be included in the methylKit objects. defaults to 10.
mincov = 3  # 5~10x coverage
)
# read CpG.cov.txt files from bismark2bedGraph outputs
cpg.files <- list.files(".", recursive = TRUE,pattern = "_CpG.txt$",full.names = TRUE)
# read the files to a methylRawList object: myobj
myobj_lowCov=methRead(as.list(cpg.files),
sample.id=as.list(gsub("_CpG.txt","",basename(cpg.files))),
assembly="galGal6", # can be any string
treatment=c(1,1,1,0,0,0), # a vector contatining 0 and 1 denoting which samples are control which samples are test
context="CpG", # methylation context string, ex: CpG,CHG,CHH, etc. (default:CpG)
# mincov = 10, # minimum read coverage to be included in the methylKit objects. defaults to 10.
mincov = 3  # 5~10x coverage
)
tiles = tileMethylCounts(myobj_lowCov,win.size=1000,step.size=1000,cov.bases = 10)
head(tiles[[1]],3)
head(tiles[[1]],3)
myDiff=calculateDiffMeth(meth)
# get hyper methylated bases
myDiff25p.hyper=getMethylDiff(myDiff,difference=25,qvalue=0.01,type="hyper")
# get hypo methylated bases
myDiff25p.hypo=getMethylDiff(myDiff,difference=25,qvalue=0.01,type="hypo")
# get all differentially methylated bases
myDiff25p=getMethylDiff(myDiff,difference=25,qvalue=0.01)
diffMethPerChr(myDiff,plot=FALSE,qvalue.cutoff=0.01, meth.cutoff=25)
library(genomation)
# gene.obj=readTranscriptFeatures(system.file("extdata", "refseq.hg18.bed.txt", package = "methylKit"))
gene.obj=readTranscriptFeatures("./galGal6.NCBIRefSeq.Gene.bed")
annotateWithGeneParts(as(myDiff25p,"GRanges"),gene.obj)
# read the shores and flanking regions and name the flanks as shores
# and CpG islands as CpGi
# cpg.obj=readFeatureFlank(system.file("extdata", "cpgi.hg18.bed.txt",
#                                         package = "methylKit"),
#                            feature.flank.name=c("CpGi","shores"))
cpg.obj=readFeatureFlank("./galGal6.cpgIslandExt.bed.txt", feature.flank.name=c("CpGi","shores"))
# convert methylDiff object to GRanges and annotate
diffCpGann=annotateWithFeatureFlank(as(myDiff25p,"GRanges"),
cpg.obj$CpGi,cpg.obj$shores,
feature.name="CpGi",flank.name="shores")
diffCpGann
promoters=regionCounts(myobj,gene.obj$promoters)
head(promoters[[1]])
##     chr    start      end strand coverage numCs numTs
## 1 chr21 10011791 10013791      -     7953  6662  1290
## 2 chr21 10119796 10121796      -     1725  1171   554
## 3 chr21 10119808 10121808      -     1725  1171   554
## 4 chr21 13903368 13905368      +       10    10     0
## 5 chr21 14273636 14275636      -      282   220    62
## 6 chr21 14509336 14511336      +     1058    55  1003
diffAnn=annotateWithGeneParts(as(myDiff25p,"GRanges"),gene.obj)
# target.row is the row number in myDiff25p
head(getAssociationWithTSS(diffAnn))
getTargetAnnotationStats(diffAnn,percentage=TRUE,precedence=TRUE)
plotTargetAnnotation(diffAnn,precedence=TRUE,
main="differential methylation annotation")
plotTargetAnnotation(diffCpGann,col=c("green","gray","white"),
main="differential methylation annotation")
getFeatsWithTargetsStats(diffAnn,percentage=TRUE)
class(meth)
as(meth,"GRanges")
class(myDiff)
as(myDiff,"GRanges")
class(myobjDB[[1]])
percMethylation(meth)
